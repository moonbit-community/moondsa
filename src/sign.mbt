///|
/// Generates a cryptographic key pair for the Dilithium digital signature scheme.
///
/// This function implements the key generation algorithm as specified in the
/// NIST FIPS 204 standard. It generates a public/private key pair suitable for
/// use with the Dilithium signature scheme.
///
/// # Key Generation Process
///
/// The key generation involves:
/// 1. Generating or using provided random seed material
/// 2. Expanding the seed into cryptographic keys using SHAKE256
/// 3. Sampling secret polynomials with specific distributions
/// 4. Computing the public matrix and public key
/// 5. Packing the keys into standardized formats
///
/// # Parameters
///
/// * `seed` : Either:
///   - `Ok(seed_bytes)`: A 32-byte seed for deterministic key generation
///   - `Err(rand)`: A random number generator for non-deterministic generation
///
/// # Returns
///
/// A tuple `(public_key, secret_key)` where:
/// - `public_key`: Byte array containing the packed public key
/// - `secret_key`: Byte array containing the packed secret key
///
/// # Key Sizes
///
/// The key sizes depend on the current security level:
/// - Dilithium-2: 1312-byte public key, 2528-byte secret key
/// - Dilithium-3: 1952-byte public key, 4016-byte secret key  
/// - Dilithium-5: 2592-byte public key, 4864-byte secret key
pub fn keypair_gen(
  seed : Result[Array[Byte], Rand],
) -> (Array[Byte], Array[Byte]) {
  let init_seed : Array[Byte] = Array::make(SEEDBYTES, 0)
  let k = dilithium_context.get_params_set().k
  let l = dilithium_context.get_params_set().l
  let publickey_bytes = dilithium_context.get_params_set().publickey_bytes
  match seed {
    Ok(x) => {
      init_seed.clear()
      init_seed.append(x)
    }
    Err(rand) => {
      let x = randombytes(rand, SEEDBYTES)
      init_seed.clear()
      init_seed.append(x)
    }
  }
  let seedbuf : Array[Byte] = Array::make(2 * SEEDBYTES + CRHBYTES, 0)
  let tr : Array[Byte] = Array::make(SEEDBYTES, 0)
  let rho : Array[Byte] = Array::make(SEEDBYTES, 0)
  let rhoprime : Array[Byte] = Array::make(CRHBYTES, 0)
  let key : Array[Byte] = Array::make(SEEDBYTES, 0)
  let mat : Array[Polyvecl] = Array::new()
  let s1 : Polyvecl = Polyvecl::default()
  let s2 : Polyveck = Polyveck::default()
  let t1 : Polyveck = Polyveck::default()
  let t0 : Polyveck = Polyveck::default()
  for i in 0..<k {
    mat.push(Polyvecl::default())
  }

  // Get randomness for rho, rhoprime and key
  shake256(
    output=seedbuf,
    (2 * SEEDBYTES + CRHBYTES).reinterpret_as_uint(),
    input=init_seed,
    SEEDBYTES.reinterpret_as_uint(),
  )
  rho.clear()
  rho.append(seedbuf[0:SEEDBYTES].to_array())
  rhoprime.clear()
  rhoprime.append(seedbuf[SEEDBYTES:SEEDBYTES + CRHBYTES].to_array())
  key.clear()
  key.append(seedbuf[SEEDBYTES + CRHBYTES:].to_array())
  // Expand matrix
  Polyvecl::matrix_expand(mat, rho)
  // Sample short vectors s1 and s2
  s1.uniform_eta(rhoprime, 0)
  s2.uniform_eta(rhoprime, l.to_uint16())
  // Matrix-vector multiplication
  let s1hat = s1.copy()
  s1hat.ntt()
  polyvec_matrix_pointwise_montgomery(t1, mat, s1hat)
  t1.reduce()
  t1.invntt_tomont()
  // Add error vector s2
  t1.add(s2)
  // Extract t1 and write public key
  t1.caddq()
  t1.power2round(t0)
  let pk = pack_pk(rho, t1)

  // Compute H(rho, t1) and write secret key
  shake256(
    output=tr,
    SEEDBYTES.reinterpret_as_uint(),
    input=pk,
    publickey_bytes.reinterpret_as_uint(),
  )
  let sk = pack_sk(rho, tr, key, t0, s1, s2)
  (pk, sk)
}

///|
/// Creates a digital signature for a message using the Dilithium post-quantum
/// signature algorithm.
///
/// This function implements the signing algorithm as specified in NIST FIPS 204.
/// It generates a signature that can be verified using the corresponding public key.
/// The signing process uses rejection sampling to ensure signature security.
///
/// # Signing Process
///
/// The signature generation involves:
/// 1. Deriving randomness from the secret key and message
/// 2. Sampling random masking polynomials
/// 3. Computing the commitment vector
/// 4. Generating the challenge polynomial via hash function
/// 5. Computing the response vector with rejection sampling
/// 6. Packing the signature components
///
/// # Parameters
///
/// * `message` : The message data to be signed as a byte array
/// * `secret_key` : The secret key generated by `crypto_sign_keypair`
///
/// # Returns
///
/// The digital signature as a byte array in the standardized format.
///
/// # Signature Sizes
///
/// Signature sizes depend on the security level:
/// - Dilithium-2: 2420 bytes
/// - Dilithium-3: 3293 bytes
/// - Dilithium-5: 4595 bytes
///
/// # Panics
///
/// Panics if an internal error occurs during signature generation. This should
/// not happen under normal circumstances and indicates a serious implementation
/// issue.
pub fn sign(m : Array[Byte], sk : Array[Byte]) -> Array[Byte] {
  let k = dilithium_context.get_params_set().k
  let polyw1_packedbytes = dilithium_context.get_params_set().polyw1_packedbytes
  let gamma1 = dilithium_context.get_params_set().gamma1
  let gamma2 = dilithium_context.get_params_set().gamma2
  let beta = dilithium_context.get_params_set().beta
  let omega = dilithium_context.get_params_set().omega
  let sign_bytes = dilithium_context.get_params_set().sign_bytes
  // `key` and `mu` are concatenated
  let keymu : Array[Byte] = Array::make(SEEDBYTES + CRHBYTES, 0)
  let mat : Array[Polyvecl] = Array::new()
  let y : Polyvecl = Polyvecl::default()
  let w1 : Polyveck = Polyveck::default()
  let w0 : Polyveck = Polyveck::default()
  let h = Polyveck::default()
  let cp = Poly::default()
  let state = KeccakState::default() //shake256_init()
  let rhoprime : Array[Byte] = Array::make(CRHBYTES, 0)
  let (rho, key, tr, t0, s1, s2) = unpack_sk(sk)
  for i in 0..<k {
    mat.push(Polyvecl::default())
  }

  // set keymu from key
  for i in 0..<SEEDBYTES {
    keymu[i] = key[i]
  }

  // Compute CRH(tr, msg)
  shake256_absorb(state, tr, SEEDBYTES.reinterpret_as_uint())
  shake256_absorb(state, m, m.length().reinterpret_as_uint())
  shake256_finalize(state)
  shake256_squeeze(keymu[SEEDBYTES:], CRHBYTES.reinterpret_as_uint(), state)
  shake256(
    output=rhoprime,
    CRHBYTES.reinterpret_as_uint(),
    input=keymu,
    (SEEDBYTES + CRHBYTES).reinterpret_as_uint(),
  )
  // Expand matrix and transform vectors
  Polyvecl::matrix_expand(mat, rho)
  s1.ntt()
  s2.ntt()
  t0.ntt()
  let mut nonce : UInt16 = 0
  let sig : Array[Byte] = Array::make(sign_bytes, 0)
  while true {
    // Sample intermediate vector y
    y.uniform_gamma1(rhoprime, nonce)
    nonce += 1
    // Matrix-vector multiplication
    let z = y.copy()
    z.ntt()
    polyvec_matrix_pointwise_montgomery(w1, mat, z)
    w1.reduce()
    w1.invntt_tomont()
    // Decompose w and call the random oracle
    w1.caddq()
    w1.decompose(w0)
    w1.pack_w1(sig)
    state.init()
    shake256_absorb(
      state,
      keymu[SEEDBYTES:].to_array(),
      CRHBYTES.reinterpret_as_uint(),
    )
    shake256_absorb(state, sig, (k * polyw1_packedbytes).reinterpret_as_uint())
    shake256_finalize(state)
    shake256_squeeze(sig, SEEDBYTES.reinterpret_as_uint(), state)
    cp.challenge(sig)
    cp.ntt()

    // Compute z, reject if it reveals secret
    Polyvecl::pointwise_poly_montgomery(z, cp, s1)
    z.invntt_tomont()
    z.add(y)
    z.reduce()
    if z.chknorm(gamma1 - beta) > 0 {
      continue
    }

    // Check that subtracting cs2 does not change high bits of w and low bits
    // do not reveal secret information 
    Polyveck::pointwise_poly_montgomery(h, cp, s2)
    h.invntt_tomont()
    w0.sub(h)
    w0.reduce()
    if w0.chknorm(gamma2 - beta) > 0 {
      continue
    }

    // Compute hints for w1
    Polyveck::pointwise_poly_montgomery(h, cp, t0)
    h.invntt_tomont()
    h.reduce()
    if h.chknorm(gamma2) > 0 {
      continue
    }
    w0.add(h)
    let n = Polyveck::make_hint(h, w0, w1)
    if n > omega {
      continue
    }
    // Write signature
    let _ = pack_sig(sig, None, z, h)
    return sig
  }
  panic() // unreachable
}

///|
/// Verifies a Dilithium digital signature against a message using the provided
/// public key.
///
/// This function implements the signature verification algorithm as specified
/// in NIST FIPS 204. It checks whether a given signature was created by the
/// private key corresponding to the provided public key for the specified message.
///
/// # Verification Process
///
/// The verification involves:
/// 1. Parsing and validating the signature format
/// 2. Checking bounds on signature components
/// 3. Recomputing the challenge polynomial from the message
/// 4. Verifying the algebraic relationship between signature components
/// 5. Checking norm bounds to ensure signature validity
///
/// # Parameters
///
/// * `sig` : The digital signature to verify as a byte array
/// * `m` : The original message that was signed as a byte array
/// * `pk` : The public key used for verification as a byte array
///
/// # Returns
///
/// - `Ok(())`: The signature is valid for the given message and public key
/// - `Err(SignError)`: The signature is invalid, with specific error information
///
/// # Error Conditions
///
/// Returns `SignError` for:
/// - Incorrect signature length
/// - Invalid signature format or encoding
/// - Signature components out of valid bounds
/// - Failed algebraic verification
/// - Invalid norm bounds on signature components
pub fn verify(
  sig : Array[Byte],
  m : Array[Byte],
  pk : Array[Byte],
) -> Result[Unit, SignError] {
  let sign_bytes = dilithium_context.get_params_set().sign_bytes
  let beta = dilithium_context.get_params_set().beta
  let gamma1 = dilithium_context.get_params_set().gamma1
  let k = dilithium_context.get_params_set().k
  let polyw1_packedbytes = dilithium_context.get_params_set().polyw1_packedbytes
  let publickey_bytes = dilithium_context.get_params_set().publickey_bytes
  let buf : Array[Byte] = Array::make(k * polyw1_packedbytes, 0)
  let mu : Array[Byte] = Array::make(CRHBYTES, 0)
  let mut c : Array[Byte] = Array::make(SEEDBYTES, 0)
  let c2 : Array[Byte] = Array::make(SEEDBYTES, 0)
  let cp = Poly::default()
  let mat : Array[Polyvecl] = Array::new()
  let mut z = Polyvecl::default()
  let w1 = Polyveck::default()
  let mut h = Polyveck::default()
  let state = KeccakState::default() // shake256_init()
  if sig.length() != sign_bytes {
    return Err(SignError("Wrong signature length"))
  }
  for i in 0..<k {
    mat.push(Polyvecl::default())
  }
  let (rho, t1) = unpack_pk(pk)
  match unpack_sig(sig) {
    Err(e) => return Err(e)
    Ok((sig_z, sig_h, sig_c)) => {
      c = sig_c
      z = sig_z
      h = sig_h
    }
  }
  if z.chknorm(gamma1 - beta) > 0 {
    return Err(SignError("Invalid signature"))
  }

  // Compute CRH(CRH(rho, t1), msg)
  shake256(
    output=mu,
    SEEDBYTES.reinterpret_as_uint(),
    input=pk,
    publickey_bytes.reinterpret_as_uint(),
  )
  shake256_absorb(state, mu, SEEDBYTES.reinterpret_as_uint())
  shake256_absorb(state, m, m.length().reinterpret_as_uint())
  shake256_finalize(state)
  shake256_squeeze(mu, CRHBYTES.reinterpret_as_uint(), state)

  // Matrix-vector multiplication; compute Az - c2^dt1
  cp.challenge(c)
  Polyvecl::matrix_expand(mat, rho)
  z.ntt()
  polyvec_matrix_pointwise_montgomery(w1, mat, z)
  cp.ntt()
  t1.shiftl()
  t1.ntt()
  let t1_2 = t1.copy()
  Polyveck::pointwise_poly_montgomery(t1, cp, t1_2)
  w1.sub(t1)
  w1.reduce()
  w1.invntt_tomont()

  // Reconstruct w1
  w1.caddq()
  w1.use_hint(h)
  w1.pack_w1(buf)

  // Call random oracle and verify challenge
  state.init()
  shake256_absorb(state, mu, CRHBYTES.reinterpret_as_uint())
  shake256_absorb(state, buf, (k * polyw1_packedbytes).reinterpret_as_uint())
  shake256_finalize(state)
  shake256_squeeze(c2, SEEDBYTES.reinterpret_as_uint(), state)
  // Doesn't require constant time equality check
  if c != c2 {
    Err(SignError("verify failed"))
  } else {
    Ok(())
  }
}
